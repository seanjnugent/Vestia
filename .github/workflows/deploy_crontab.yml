name: Deploy Crontab to Raspberry Pi

on:
  push:
    branches:
      - main  # or the branch you want to trigger the deployment

jobs:
  deploy-crontab:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up SSH key for authentication
    - name: Set up SSH key for authentication
      run: |
        # Create the .ssh directory if it doesn't exist
        mkdir -p ~/.ssh
        
        # Write the private key stored in GitHub Secrets to the id_rsa file
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        
        # Set correct permissions for the private key
        chmod 600 ~/.ssh/id_rsa
        
        # Add the Raspberry Pi to the known hosts file to avoid SSH verification prompts
        ssh-keyscan -H ${{ secrets.PI_HOST }} >> ~/.ssh/known_hosts
        
        # Start the SSH agent
        eval $(ssh-agent -s)
        
        # Add the private key to the SSH agent
        ssh-add ~/.ssh/id_rsa

    # Step 3: Deploy crontab file and update crontab on Raspberry Pi
    - name: Deploy crontab to Raspberry Pi
      run: |
        # Ensure the crontab.txt file exists in the repository
        if [ ! -f crontab.txt ]; then
          echo "crontab.txt not found!"
          exit 1
        fi

        # Transfer crontab.txt to Raspberry Pi
        scp crontab.txt ${{ secrets.PI_USER }}@${{ secrets.PI_HOST }}:/home/${{ secrets.PI_USER }}/crontab.txt
        
        # SSH into the Raspberry Pi to install the crontab file
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ secrets.PI_HOST }} << EOF
            # Install the new crontab
            crontab /home/${{ secrets.PI_USER }}/crontab.txt
            
            # Confirm that the crontab was updated
            echo "Crontab updated successfully."
        EOF
